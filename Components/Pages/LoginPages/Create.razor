@page "/"
@inject DatingAppModelToDatabase.Data.DatingAppContext DB
@using DatingAppModelToDatabase.Models
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Login</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="DB" OnValidSubmit="AddLogin" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="loginname" class="form-label">LoginName:</label> 
                <InputText id="loginname" @bind-Value="Login.LoginName" class="form-control" /> 
                <ValidationMessage For="() => Login.LoginName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="Login.Password" class="form-control" /> 
                <ValidationMessage For="() => Login.Password" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/logins">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Login Login { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddLogin()
    {
        DB.Logins.Add(Login);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/logins");
    }
}
